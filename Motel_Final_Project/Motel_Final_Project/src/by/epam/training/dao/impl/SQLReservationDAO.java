package by.epam.training.dao.impl;import by.epam.training.dao.DAOException;import by.epam.training.dao.DAOFactory;import by.epam.training.dao.ReservationDAO;import by.epam.training.dao.UserDAO;import by.epam.training.dao.impl.connectionpool.ConnectionPoolException;import by.epam.training.dao.impl.connectionpool.impl.ConnectionPoolImpl;import by.epam.training.domain.Reservation;import by.epam.training.service.ServiceException;import com.mysql.jdbc.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.concurrent.TimeUnit;import java.util.logging.Level;import java.util.logging.Logger;/** * Created by Михаил on 29.05.2016. */public class SQLReservationDAO implements ReservationDAO {    private static final SQLReservationDAO sqlReservationDAO = new SQLReservationDAO();    Logger logger = Logger.getLogger(String.valueOf(SQLReservationDAO.class));    private static final String RESERVATION_CHECK_SQL= "SELECT * FROM orders WHERE Start_date=? AND End_date=? AND Room_id=?";    private static final String CREATE_RESERVATION_SQL= "INSERT INTO orders (Start_date, End_date, User_id, Numb_of_guests, Room_id) VALUES(?, ?, ?, ?, ?)";    private static final String GET_RESERVATIONS_BY_ID_SQL = "SELECT * FROM orders WHERE User_id=?";    private static final String GET_ALL_RESERVATIONS_SQL = "SELECT * FROM orders WHERE User_id<>?";    private static final String DELETE_RESERVATION_SQL = "DELETE FROM orders WHERE Order_id=?";    private static final String APPROVE_RESERVATION_SQL = "UPDATE orders SET Is_approved='1' WHERE Order_id=?";    private static final String DEBIT_FUNDS_SQL = "UPDATE user_info SET Cash_account=? WHERE User_id=?";    public static SQLReservationDAO getInstance(){        return sqlReservationDAO;    }    @Override    public boolean checkReservation(String startDate, String endDate, String userID, String guestNumber, String roomID) throws DAOException {        System.out.println("====================CHECK RESERVATION=========================");        System.out.println("You call check reservation.");        Connection connection = null;        boolean status = false;        PreparedStatement statement = null;        ResultSet resultSet = null;        try{            connection = ConnectionPoolImpl.getInstance().takeConnection();            System.out.println("Connection is created.");            statement = connection.prepareStatement(RESERVATION_CHECK_SQL);            System.out.println("Statement is OK.");            statement.setString(1, String.valueOf(startDate));            statement.setString(2, String.valueOf(endDate));            statement.setString(3, roomID);            resultSet = statement.executeQuery();            if( resultSet.next() ){                status = true;            }            if (resultSet == null) {                logger.log(Level.WARNING,"Error reading from db.");            }            if (statement != null) {                statement.close();            } else {                logger.log(Level.WARNING,"Statement is not created.");            }        } catch(SQLException e){            throw new DAOException(e);        } catch (ConnectionPoolException e) {            throw new DAOException(e);        } finally{            //return connection into connection pool            try {                ConnectionPoolImpl.getInstance().returnConnection(connection);            } catch (ConnectionPoolException e) {                throw new DAOException(e);            }        }        System.out.println("=============================================");        return status;    }    @Override    public Reservation getReservation(String startDate, String endDate, String userID, String guestNUmber, String roomID) throws DAOException {        System.out.println("====================GET RESERVATION=========================");        System.out.println("Call getReservation.");        Reservation reservation = new Reservation(getID(startDate, endDate, roomID),userID, guestNUmber, roomID, startDate, endDate, false);        System.out.println("=============================================");        return reservation;    }    @Override    public boolean createReservation(String startDate, String endDate, String userID, String guestNUmber, String roomID, String toDebit) throws DAOException, ServiceException {        System.out.println("====================CREATE RESERVATION=========================");        System.out.println("You call createReservation.");        Connection connection = null;        PreparedStatement statement = null;        int countRows;        long daysToLive;        try{            connection = ConnectionPoolImpl.getInstance().takeConnection();            System.out.println("Connection is created.");            //create user            statement = connection.prepareStatement(CREATE_RESERVATION_SQL);            System.out.println("Statement is OK.");            statement.setString(1, String.valueOf(startDate));            statement.setString(2, String.valueOf(endDate));            statement.setString(3, userID);            statement.setString(4, guestNUmber);            statement.setString(5, roomID);            countRows = statement.executeUpdate();            SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd");            try {                Date date1 = myFormat.parse(startDate);                Date date2 = myFormat.parse(endDate);                long diff = date2.getTime() - date1.getTime();                System.out.println ("Days: " + TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS));                daysToLive = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);                boolean debited = debitAccount(userID, toDebit, daysToLive);                System.out.println("Debited = " + debited);            } catch (ParseException e) {                e.printStackTrace();            }            if (statement != null) {                statement.close();            } else {                logger.log(Level.WARNING,"Statement is not created.");            }        } catch(SQLException e){            throw new DAOException(e);        } catch (ConnectionPoolException e) {            throw new DAOException(e);        } finally{            //return connection into connection pool            try {                ConnectionPoolImpl.getInstance().returnConnection(connection);            } catch (ConnectionPoolException e) {                throw new DAOException(e);            }        }        if( countRows > 0){            System.out.println("Reservation is registered.");            System.out.println("=============================================");            return true;        } else {            System.out.println("Reservation is not registered.");            System.out.println("=============================================");            return false;        }    }    @Override    public Long getID(String startDate, String endDate, String roomID) throws DAOException {        System.out.println("======================GET ID=======================");        System.out.println("You call getID.");        Connection connection = null;        PreparedStatement statement = null;        ResultSet resultSet = null;        Long id = null;        try{            connection = ConnectionPoolImpl.getInstance().takeConnection();            System.out.println("Connection is created.");            statement = connection.prepareStatement(RESERVATION_CHECK_SQL);            System.out.println("Statement is OK.");            statement.setString(1, String.valueOf(startDate));            statement.setString(2, String.valueOf(endDate));            statement.setString(3, roomID);            resultSet = statement.executeQuery();            if( resultSet.next()){                id = resultSet.getLong("Order_id");            }            if (resultSet == null) {                logger.log(Level.WARNING,"Error reading from db.");            }            if (statement != null) {                statement.close();            } else {                logger.log(Level.WARNING,"Statement is not created.");            }        } catch(SQLException e){            throw new DAOException(e);        } catch (ConnectionPoolException e) {            logger.log(Level.WARNING,e.getMessage());            throw new DAOException(e);        } finally{            //return connection into connection pool            try {                ConnectionPoolImpl.getInstance().returnConnection(connection);            } catch (ConnectionPoolException e) {                throw new DAOException(e);            }        }        System.out.println("=============================================");        return id;    }    @Override    public ArrayList<Reservation> getReservationByID(String userID) throws DAOException {        System.out.println("====================GET RESERVATION BY USER ID=========================");        System.out.println("You call get reservation by user id.");        ArrayList<Reservation> reservations = new ArrayList<>();        Connection connection = null;        boolean status = false;        PreparedStatement statement = null;        ResultSet resultSet = null;        try{            connection = ConnectionPoolImpl.getInstance().takeConnection();            System.out.println("Connection is created.");            statement = connection.prepareStatement(GET_RESERVATIONS_BY_ID_SQL);            System.out.println("Statement is OK.");            statement.setString(1, String.valueOf(userID));            resultSet = statement.executeQuery();            while (resultSet.next()) {                Reservation reservation = new Reservation(                        getID(resultSet.getString("Start_date"), resultSet.getString("End_date"),                                resultSet.getString("Room_id")), resultSet.getString("User_id"),                        resultSet.getString("Numb_of_guests"), resultSet.getString("Room_id"),                        resultSet.getString("Start_date"), resultSet.getString("End_date"), resultSet.getBoolean("Is_approved"));                reservations.add(reservation);            }            if (resultSet == null) {                logger.log(Level.WARNING,"Error reading from db.");            }            if (statement != null) {                statement.close();            } else {                logger.log(Level.WARNING,"Statement is not created.");            }        } catch(SQLException e){            throw new DAOException(e);        } catch (ConnectionPoolException e) {            throw new DAOException(e);        } finally{            //return connection into connection pool            try {                ConnectionPoolImpl.getInstance().returnConnection(connection);            } catch (ConnectionPoolException e) {                logger.log(Level.WARNING, "Cannot return connection into connection pool");            }        }        System.out.println("=============================================");        return reservations;    }    @Override    public ArrayList<Reservation> getAllReservations(String userID) throws DAOException {        System.out.println("====================GET ALL RESERVATION=========================");        System.out.println("You call get all reservation.");        ArrayList<Reservation> reservations = new ArrayList<>();        Connection connection = null;        boolean status = false;        PreparedStatement statement = null;        ResultSet resultSet = null;        try{            connection = ConnectionPoolImpl.getInstance().takeConnection();            System.out.println("Connection is created.");            statement = connection.prepareStatement(GET_ALL_RESERVATIONS_SQL);            statement.setString(1, String.valueOf(userID));            System.out.println("Statement is OK.");            resultSet = statement.executeQuery();//            while (resultSet.next()) {                Reservation reservation = new Reservation(                        getID(resultSet.getString("Start_date"), resultSet.getString("End_date"),                                resultSet.getString("Room_id")), resultSet.getString("User_id"),                        resultSet.getString("Numb_of_guests"), resultSet.getString("Room_id"),                        resultSet.getString("Start_date"), resultSet.getString("End_date"), resultSet.getBoolean("Is_approved"));                reservations.add(reservation);            }//            if (resultSet == null) {                logger.log(Level.WARNING,"Error reading from db.");            }            if (statement != null) {                statement.close();            } else {                logger.log(Level.WARNING,"Statement is not created.");            }        } catch(SQLException e){            throw new DAOException(e);        } catch (ConnectionPoolException e) {            throw new DAOException(e);        } finally{            //return connection into connection pool            try {                ConnectionPoolImpl.getInstance().returnConnection(connection);            } catch (ConnectionPoolException e) {                logger.log(Level.WARNING, "Cannot return connection into connection pool");            }        }        System.out.println("=============================================");        return reservations;    }    @Override    public boolean deleteReservation(String orderID) throws DAOException {        System.out.println("====================DELETE RESERVATION=========================");        System.out.println("You call createReservation.");        Connection connection = null;        PreparedStatement statement = null;        int countRows;        try{            connection = ConnectionPoolImpl.getInstance().takeConnection();            System.out.println("Connection is created.");            //create user            statement = connection.prepareStatement(DELETE_RESERVATION_SQL);            System.out.println("Statement is OK.");            statement.setString(1, String.valueOf(orderID));            countRows = statement.executeUpdate();            if (statement != null) {                statement.close();            } else {                logger.log(Level.WARNING,"Statement is not created.");            }        } catch(SQLException e){            throw new DAOException(e);        } catch (ConnectionPoolException e) {            throw new DAOException(e);        } finally{            //return connection into connection pool            try {                ConnectionPoolImpl.getInstance().returnConnection(connection);            } catch (ConnectionPoolException e) {                logger.log(Level.WARNING, "Cannot return connection into connection pool");            }        }        if( countRows > 0){            System.out.println("Reservation deleted.");            System.out.println("=============================================");            return true;        } else {            System.out.println("Reservation is not deleted.");            System.out.println("=============================================");            return false;        }    }    @Override    public boolean approveReservation(String orderID) throws DAOException {        System.out.println("====================APPROVE RESERVATION=========================");        System.out.println("You call approveReservation.");        Connection connection = null;        PreparedStatement statement = null;        int countRows;        try{            connection = ConnectionPoolImpl.getInstance().takeConnection();            System.out.println("Connection is created.");            //create user            statement = connection.prepareStatement(APPROVE_RESERVATION_SQL);            System.out.println("Statement is OK.");            statement.setString(1, String.valueOf(orderID));            countRows = statement.executeUpdate();            if (statement != null) {                statement.close();            } else {                logger.log(Level.WARNING, "Statement is not created.");            }        } catch(SQLException e){            throw new DAOException(e);        } catch (ConnectionPoolException e) {            throw new DAOException(e);        } finally{            //return connection into connection pool            try {                ConnectionPoolImpl.getInstance().returnConnection(connection);            } catch (ConnectionPoolException e) {                throw new DAOException(e);            }        }        if( countRows > 0){            System.out.println("Reservation approved.");            System.out.println("=============================================");            return true;        } else {            System.out.println("Reservation is not approved.");            System.out.println("=============================================");            return false;        }    }    @Override    public boolean debitAccount(String userID, String toDebit, Long daysToLive) throws DAOException, ServiceException {        System.out.println("====================DEBIT FUNDS=========================");        System.out.println("You call debitAccount.");        Connection connection = null;        PreparedStatement statement = null;        int countRows;        Long willBeOnAccount =null;        DAOFactory daoFactory = DAOFactory.getDAOFactory();        UserDAO userDAO = daoFactory.getUserDAO();        if (Long.parseLong(userDAO.getCashAccount(userID)) - Long.parseLong(toDebit) * daysToLive < 0){            throw new ServiceException("You don't have enough money for this reservation");        }        try{            willBeOnAccount = Long.parseLong(userDAO.getCashAccount(userID)) - Long.parseLong(toDebit) * daysToLive;            connection = ConnectionPoolImpl.getInstance().takeConnection();            System.out.println("Connection is created.");            statement = connection.prepareStatement(DEBIT_FUNDS_SQL);            System.out.println("Statement is OK.");            statement.setString(1, String.valueOf(willBeOnAccount));            statement.setString(2, String.valueOf(userID));            countRows = statement.executeUpdate();            if (statement != null) {                statement.close();            } else {                logger.log(Level.WARNING, "Statement is not created.");            }        } catch(SQLException e){            throw new DAOException(e);        } catch (ConnectionPoolException e) {            throw new DAOException(e);        } finally{            //return connection into connection pool            try {                ConnectionPoolImpl.getInstance().returnConnection(connection);            } catch (ConnectionPoolException e) {                throw new DAOException(e);            }        }        if( countRows > 0){            System.out.println("Money debited successfully.");            System.out.println("=============================================");            return true;        } else {            System.out.println("Money hsn't been debited.");            System.out.println("=============================================");            return false;        }    }}